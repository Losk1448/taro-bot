# main.py

"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –±–æ—Ç–∞ ArcanaLens.

–î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å:
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞, –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –æ—á–µ—Ä–µ–¥–∏.
- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ callback-–∑–∞–ø—Ä–æ—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram.
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∫–∞—Ä—Ç—ã, —Ä–∞—Å–∫–ª–∞–¥–æ–≤, –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

import asyncio
import logging
import datetime
import html
import os
import sys
from dataclasses import dataclass
from typing import Optional, Dict

from aiogram.exceptions import TelegramBadRequest
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.client.bot import DefaultBotProperties
from aiogram.types import (
    InlineKeyboardMarkup,
    ContentType,
    LabeledPrice,
    FSInputFile,
)
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py
from config import (
    BOT_TOKEN,
    MAX_SYNCHRONOUS_TASKS,
    MAX_REQUESTS_PER_SECOND,
    MAX_REQUESTS_PER_HOUR,
    SAMPLE_CARDS,
    PAY_LINK,
)

import database

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ database.py
from database import (
    init_db,
    register_user,
    get_random_card,
    mark_daily_card,
    can_ask_question,
    can_choose_daily_card,
    can_do_spread,
    subscription_info_text,
    list_users_paginated,
    set_subscription_status,
    extend_subscription,
    update_transaction_status,
    save_transaction,
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ GPT
from gpt_requests import (
    RequestDispatcher,
    ask_gpt_in_queue,
    get_card_description,
    get_shaman_oracle_description,
    get_goddess_union_description,
    ask_yandex_gpt,
    ask_cbt,
    get_spread_interpretation,
)

from utils import safe_edit_or_send, admin_required, markdown_to_telegram_html


# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ (—É–ª—É—á—à—ë–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
from errors import error_handler, handle_unhandled_exception, request_context


# ============================================================================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
# ============================================================================


logging.basicConfig(
    level=logging.INFO, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
logger = logging.getLogger(__name__)

loop = asyncio.get_event_loop()
loop.set_exception_handler(handle_unhandled_exception)


# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò GPT
# ============================================================================


bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
router = Router()
dp.include_router(router)


@dataclass
class PendingSubAction:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–æ–π.

    –ê—Ç—Ä–∏–±—É—Ç—ã:
        action (str): –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è ("extend" –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏–ª–∏ "cancel_partial" –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è).
        target_tid (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è.
        timestamp (datetime.datetime): –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏.
    """

    action: str
    target_tid: int
    timestamp: datetime.datetime = datetime.datetime.now(datetime.timezone.utc)


# ============================================================================
# –§–£–ù–ö–¶–ò–ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ì–û –•–û–î–ê
# =============================================================================


def approximate_tokens_count(text: str) -> int:
    """
    –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø–æ–¥—Å—á—ë—Ç "—Ç–æ–∫–µ–Ω–æ–≤" –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ª–æ–≤.

    Args:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.

    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ "—Ç–æ–∫–µ–Ω–æ–≤" (—Å–ª–æ–≤) –≤ —Ç–µ–∫—Å—Ç–µ.
    """
    return len(text.split())


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è GPT-–∑–∞–ø—Ä–æ—Å–æ–≤
request_dispatcher: RequestDispatcher = None

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ–∂–∏–¥–∞–µ–º—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–∞ (–∫–ª—é—á: user_id, –∑–Ω–∞—á–µ–Ω–∏–µ: —Å—Ç—Ä–æ–∫–∞)
pending_question_variants: dict[int, str] = {}

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞—Å—Å—ã–ª–∫–∏
broadcast_mode_admins: set[int] = set()

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤ (–∫–ª—é—á: user_id, –∑–Ω–∞—á–µ–Ω–∏–µ: —Å–ª–æ–≤–∞—Ä—å —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º)
pending_spreads: dict[int, dict] = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∫–ª—é—á: admin_id)
pending_sub_actions: Dict[int, PendingSubAction] = {}

USERS_PER_PAGE = 4


# ============================================================================
# –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–î–ü–ò–°–ö–û–ô –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
# ============================================================================


@error_handler(default_return=False)
async def check_subscription_notifications(telegram_id: int, chat_id: int) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.

    –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (premium) —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞ 3 –¥–Ω—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è.

    Args:
        telegram_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
        chat_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.
    """
    try:
        async with database.db.execute(
            "SELECT subscription_status, subscription_end FROM users WHERE telegram_id=?",
            (telegram_id,),
        ) as cursor:
            row = await cursor.fetchone()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ: %s", e)
        return
    if not row:
        return

    sub_status, sub_end = row
    if not sub_end:
        return
    try:
        end_date = datetime.date.fromisoformat(sub_end)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏: %s", e)
        return

    today = datetime.date.today()
    days_left = (end_date - today).days

    # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (premium) —É–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–∫–æ—Ä–æ–º –æ–∫–æ–Ω—á–∞–Ω–∏–∏
    if sub_status == "premium" and days_left == 3:
        try:
            await bot.send_message(
                chat_id,
                "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤–∞—à–∞ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è. –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞.",
            )
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %s", e)


async def get_start_menu(user_id: int) -> tuple[str, InlineKeyboardMarkup]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start.

    –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.
    –ü—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.

    Args:
        user_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.

    Returns:
        tuple[str, InlineKeyboardMarkup]: –¢–µ–∫—Å—Ç –º–µ–Ω—é –∏ —Ä–∞–∑–º–µ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    sub_status = None
    try:
        async with database.db.execute(
            "SELECT subscription_status FROM users WHERE telegram_id=?",
            (user_id,),
        ) as cursor:
            row = await cursor.fetchone()
            if row:
                sub_status = row[0]
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏: %s", e)

    if sub_status != "premium":
        text = (
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞. "
            "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç:"
        )
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –∏ —Å–æ–≤–µ—Ç—ã", callback_data="help")
        builder.button(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")
        keyboard = builder.as_markup()
    else:
        text = (
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç ArcanaLens.\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å ¬´–∫–∞—Ä—Ç—É –¥–Ω—è¬ª –∏–∑ –∫–æ–ª–æ–¥—ã –¢–∞—Ä–æ\n"
            "‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –ø—Å–∏—Ö–æ–ª–æ–≥—É\n"
            "‚Ä¢ –£–∑–Ω–∞—Ç—å —Ç—Ä–∞–∫—Ç–æ–≤–∫—É –≤–∞—à–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        keyboard = get_main_menu_keyboard()

    return text, keyboard


def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –≤–∏–¥–µ Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

    Returns:
        InlineKeyboardMarkup: –†–∞–∑–º–µ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    try:
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÆ –ú–æ—è –∫–∞—Ä—Ç–∞ –¥–Ω—è", callback_data="get_card")
        builder.button(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Å–∏—Ö–æ–ª–æ–≥—É", callback_data="ask_question")
        builder.button(text="üìú –†–∞—Å–∫–ª–∞–¥", callback_data="spread")
        builder.button(text="üíå –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="info_sub")
        builder.button(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –∏ —Å–æ–≤–µ—Ç—ã", callback_data="help")
        builder.button(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")
        builder.adjust(1)
        return builder.as_markup()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: %s", e)
        return InlineKeyboardMarkup(inline_keyboard=[])


# ============================================================================
# –•–ï–ù–î–õ–ï–†–´ Aiogram
# ============================================================================


@router.callback_query(F.data == "buy_subscription")
@error_handler(default_return=None)
async def choose_payment_method_handler(callback_query: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="‚≠ê Stars", callback_data="pay_stars")
    kb.button(text="üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="pay_bank")
    kb.adjust(1)
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb.as_markup()
    )
    await callback_query.answer()


# ---------- –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars ----------
@router.callback_query(F.data == "pay_stars")
@error_handler(default_return=None)
async def buy_subscription_handler(callback_query: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Telegram Stars.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    title = "–ü–æ–ª–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
    description = (
        "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø—Å–∏—Ö–æ–ª–æ–≥—É –∏ –ø–æ–ª—É—á–∞—Ç—å —Ç—Ä–∞–∫—Ç–æ–≤–∫—É —Ä–∞—Å–∫–ª–∞–¥–∞.\n"
        "–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 –º–µ—Å—è—Ü.\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å: 500 ‚≠êÔ∏è."
    )
    payload = "full_subscription_500"
    provider_token = ""  # –î–ª—è Telegram Stars –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    currency = "XTR"  # –í–∞–ª—é—Ç–∞ –¥–ª—è Stars
    prices = [LabeledPrice(label="–ü–æ–ª–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", amount=500)]

    kb = InlineKeyboardBuilder()
    kb.button(text="–ó–∞–ø–ª–∞—Ç–∏—Ç—å 500 ‚≠êÔ∏è", pay=True)
    kb.button(text="üî∞ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")
    kb.adjust(1)

    await bot.send_invoice(
        chat_id=callback_query.from_user.id,
        title=title,
        description=description,
        payload=payload,
        provider_token=provider_token,
        currency=currency,
        prices=prices,
        start_parameter="full-subscription",
        reply_markup=kb.as_markup(),
    )
    await callback_query.answer()


@router.pre_checkout_query()
@error_handler(default_return=None)
async def pre_checkout_query_handler(
    pre_checkout_query: types.PreCheckoutQuery,
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç pre-checkout –∑–∞–ø—Ä–æ—Å, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—è –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.

    Args:
        pre_checkout_query (types.PreCheckoutQuery): –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É.
    """
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
@error_handler(default_return=None)
async def successful_payment_handler(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏.

    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –º–µ—Å—è—Ü,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π.
    """
    telegram_id = message.from_user.id
    today = datetime.date.today()
    current_end_date = None

    try:
        async with database.db.execute(
            "SELECT subscription_end FROM users WHERE telegram_id=?",
            (telegram_id,),
        ) as cursor:
            row = await cursor.fetchone()
            if row and row[0]:
                current_end_date = datetime.date.fromisoformat(row[0])
        logger.info(f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {current_end_date}")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏: %s", e)

    if current_end_date and current_end_date > today:
        new_end_date = current_end_date + datetime.timedelta(days=30)
    else:
        new_end_date = today + datetime.timedelta(days=30)
    subscription_end_date = new_end_date.isoformat()

    logger.info(f"–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –±—É–¥–µ—Ç: {subscription_end_date}")

    await set_subscription_status(telegram_id, "premium")
    await extend_subscription(telegram_id, subscription_end_date)

    transaction_id = message.successful_payment.telegram_payment_charge_id
    amount = message.successful_payment.total_amount
    logger.info(f"–ü–æ–ª—É—á–µ–Ω transaction_id: {transaction_id}, amount: {amount}")

    await save_transaction(telegram_id, transaction_id, amount, status="paid")

    try:
        async with database.db.execute(
            "SELECT transaction_id, status, date FROM transactions WHERE transaction_id=?",
            (transaction_id,),
        ) as cursor:
            row = await cursor.fetchone()
            logger.info(f"–ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {row}")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %s", e)

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à–∞ –ø–æ–ª–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 1 –º–µ—Å—è—Ü."
    )


# ---------- –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É ----------
@router.callback_query(F.data == "pay_bank")
@error_handler(default_return=None)
async def pay_bank_handler(callback_query: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    description = (
        "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø—Å–∏—Ö–æ–ª–æ–≥—É –∏ –ø–æ–ª—É—á–∞—Ç—å —Ç—Ä–∞–∫—Ç–æ–≤–∫—É —Ä–∞—Å–∫–ª–∞–¥–∞.\n"
        "–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 –º–µ—Å—è—Ü.\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å: 1000 —Ä—É–±."
    )
    kb = InlineKeyboardBuilder()
    kb.button(text="–ö—É–ø–∏—Ç—å", url=PAY_LINK)
    kb.button(text="üî∞ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")
    kb.adjust(1)

    await callback_query.message.edit_text(description, reply_markup=kb.as_markup())
    await callback_query.answer()


# ---------- –ö–æ–º–∞–Ω–¥–∞ /start –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----------
@router.message(Command("start"))
@error_handler(default_return=None)
async def cmd_start(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start:
    - –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    request_context.set({"user_id": message.from_user.id, "command": "start"})
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ—Ç username"

    await register_user(user_id, username)

    menu_text, menu_keyboard = await get_start_menu(user_id)

    await check_subscription_notifications(user_id, message.chat.id)

    await message.answer(menu_text, reply_markup=menu_keyboard)


@router.callback_query(F.data == "main_menu")
@safe_edit_or_send
@error_handler(default_return=None)
async def process_main_menu(
    callback_query: types.CallbackQuery, **kwargs
) -> tuple[str, InlineKeyboardMarkup]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.

    Returns:
        tuple[str, InlineKeyboardMarkup]: –¢–µ–∫—Å—Ç –º–µ–Ω—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """
    user_id = callback_query.from_user.id
    menu_text, menu_keyboard = await get_start_menu(user_id)
    return menu_text, menu_keyboard


# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–∫–ª–∞–¥–∞ ----------
@router.callback_query(F.data == "spread")
@error_handler(default_return=None)
async def process_spread_start(callback_query: types.CallbackQuery) -> None:
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å–∫–ª–∞–¥–∞, –ø—Ä–µ–¥–ª–∞–≥–∞—è –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    text = "–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç –±—É–¥–µ—Ç –≤ –≤–∞—à–µ–º —Ä–∞—Å–∫–ª–∞–¥–µ (–æ—Ç 1 –¥–æ 3):"
    builder = InlineKeyboardBuilder()
    builder.button(text="1", callback_data="spread_num_1")
    builder.button(text="2", callback_data="spread_num_2")
    builder.button(text="3", callback_data="spread_num_3")
    builder.button(text="üî∞ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(3)
    await callback_query.message.edit_text(text, reply_markup=builder.as_markup())
    await callback_query.answer()


@router.callback_query(F.data.startswith("spread_num_"))
@error_handler(default_return=None)
async def process_spread_num(callback_query: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ä—Ç.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback_query.from_user.id
    num_str = callback_query.data.split("_")[-1]
    try:
        expected = int(num_str)
    except ValueError:
        expected = 1
    pending_spreads[user_id] = {"expected": expected, "cards": []}
    await callback_query.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–æ–º–µ—Ä 1 –∏–∑ {expected} (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞–≥):"
    )
    await callback_query.answer()


@router.message(
    lambda message: message.from_user.id in pending_spreads and message.text is not None
)
@error_handler(default_return=None)
async def spread_input_handler(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ä—Ç –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞.

    –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–∫—Ç–æ–≤–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–∞.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ä—Ç—ã.
    """
    user_id = message.from_user.id
    state = pending_spreads[user_id]
    state["cards"].append(message.text.strip())
    expected = state["expected"]
    current = len(state["cards"])
    if current < expected:
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–æ–º–µ—Ä {current + 1} –∏–∑ {expected} (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞–≥):"
        )
    else:
        if not await can_do_spread(user_id):
            await message.answer("–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Ä–∞—Å–∫–ª–∞–¥ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
            del pending_spreads[user_id]
            return
        cards = state["cards"]
        del pending_spreads[user_id]
        await message.answer("–í–∞—à —Ä–∞—Å–∫–ª–∞–¥ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ —Ç—Ä–∞–∫—Ç–æ–≤–∫—É...")
        interpretation = await ask_gpt_in_queue(
            dispatcher=request_dispatcher,
            chat_id=message.chat.id,
            user_id=user_id,
            func_to_call=get_spread_interpretation,
            cards=cards,
        )
        interpretation = markdown_to_telegram_html(interpretation)
        await message.answer(interpretation, parse_mode="HTML")

        builder = InlineKeyboardBuilder()
        builder.button(text="üî∞ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")
        await message.answer(
            "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=builder.as_markup()
        )


# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ö–∞—Ä—Ç—ã –¥–Ω—è" ----------
@router.callback_query(F.data == "get_card")
@error_handler(default_return=None)
async def process_get_card(callback_query: types.CallbackQuery) -> None:
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    text = (
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–¥—É –¥–ª—è –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –¥–Ω—è:\n\n"
        "1. –û—Ä–∞–∫—É–ª —à–∞–º–∞–Ω–∞ –º–∏—Å—Ç–∏–∫–∞\n"
        "2. –°–æ—é–∑ –±–æ–≥–∏–Ω—å\n"
        "3. –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Ç–∞—Ä–æ"
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ä–∞–∫—É–ª —à–∞–º–∞–Ω–∞ –º–∏—Å—Ç–∏–∫–∞", callback_data="daily_card_deck_1")
    builder.button(text="–°–æ—é–∑ –±–æ–≥–∏–Ω—å", callback_data="daily_card_deck_2")
    builder.button(text="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Ç–∞—Ä–æ", callback_data="daily_card_deck_3")
    builder.button(text="üî∞ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    kb = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=kb)
    await callback_query.answer()


@error_handler(default_return=None)
async def send_tarot_card_message(
    chat_id: int, card_name: str, description: str
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¢–∞—Ä–æ-–∫–∞—Ä—Ç—ã.

    Args:
        chat_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.
        card_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã.
        description (str): –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç GPT.
    """
    try:
        try:
            card_index = SAMPLE_CARDS.index(card_name)
        except ValueError:
            card_index = 0

        parts = card_name.split(" (")
        if len(parts) == 2:
            russian_name = parts[0].strip()
            english_name = parts[1].rstrip(")").strip()
            file_name = f"{russian_name}_{english_name}_{card_index}.webp"
        else:
            file_name = f"{card_name}_{card_index}.webp"

        photo_path = os.path.join("img", "classic", file_name)

        if not os.path.exists(photo_path):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")

        safe_name = html.escape(card_name)
        safe_desc = html.escape(description)
        safe_desc = markdown_to_telegram_html(safe_desc)

        caption = f"‚ú® <b>–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è</b>\n\nüé¥ <b>{safe_name}</b>"

        photo = FSInputFile(photo_path)

        if len(caption) + len(safe_desc) <= 1024:
            caption += f"\n\n{safe_desc}"
            await bot.send_photo(
                chat_id, photo=photo, caption=caption, parse_mode="HTML"
            )
        else:
            await bot.send_photo(
                chat_id, photo=photo, caption=caption, parse_mode="HTML"
            )

            await bot.send_message(chat_id, safe_desc, parse_mode="HTML")

    except FileNotFoundError as e:
        await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n{str(e)}")
    except Exception as e:
        await bot.send_message(
            chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç—ã:\n{str(e)}"
        )
        logger.exception("–û—à–∏–±–∫–∞ –≤ send_tarot_card_message: %s", e)


@router.callback_query(F.data.startswith("daily_card_deck_"))
@error_handler(default_return=None)
async def process_daily_card_deck(callback_query: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.answer()
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    deck_number = int(callback_query.data.split("_")[-1])

    text = "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–æ–¥—ã?"
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_card_{deck_number}")
    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="main_menu")
    await callback_query.message.edit_text(text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("confirm_card_"))
@error_handler(default_return=None)
async def confirm_card_generation(callback_query: types.CallbackQuery) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç—Ä–∞–∫—Ç–æ–≤–∫—É —É GPT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.answer()
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id

    await bot.delete_message(chat_id, callback_query.message.message_id)

    deck_number = int(callback_query.data.split("_")[-1])

    if not await can_choose_daily_card(user_id, deck_number):
        await callback_query.message.answer(
            "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–∞—Ä—Ç—É –¥–Ω—è —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!"
        )
        return

    card_name = await get_random_card()
    if deck_number == 1:
        description = await ask_gpt_in_queue(
            dispatcher=request_dispatcher,
            chat_id=chat_id,
            user_id=user_id,
            func_to_call=get_shaman_oracle_description,
            card_name=card_name,
        )
    elif deck_number == 2:
        description = await ask_gpt_in_queue(
            dispatcher=request_dispatcher,
            chat_id=chat_id,
            user_id=user_id,
            func_to_call=get_goddess_union_description,
            card_name=card_name,
        )
    elif deck_number == 3:
        description = await ask_gpt_in_queue(
            dispatcher=request_dispatcher,
            chat_id=chat_id,
            user_id=user_id,
            func_to_call=get_card_description,
            card_name=card_name,
        )
    else:
        description = "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–ª–æ–¥–∞."

    await mark_daily_card(user_id, deck_number)
    await send_tarot_card_message(chat_id, card_name, description)

    builder = InlineKeyboardBuilder()
    builder.button(text="üî∞ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")
    await callback_query.message.answer(
        "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=builder.as_markup()
    )


# ---------- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ ----------
@router.callback_query(F.data == "info_sub")
@error_handler(default_return=None)
async def process_info_sub(callback_query: types.CallbackQuery) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–µ.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback_query.from_user.id
    text = await subscription_info_text(user_id)
    builder = InlineKeyboardBuilder()
    builder.button(text="üî∞ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")
    kb = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback_query.answer()


# ---------- –°–ø—Ä–∞–≤–∫–∞ –∏ —Å–æ–≤–µ—Ç—ã ----------
@router.callback_query(F.data == "help")
@error_handler(default_return=None)
async def process_help(callback_query: types.CallbackQuery) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–æ–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    text = (
        "üìù <b>–°–ø—Ä–∞–≤–∫–∞ –∏ —Å–æ–≤–µ—Ç—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n\n"
        "1) –ú–æ—è –∫–∞—Ä—Ç–∞\n"
        "2) –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
        "3) –†–∞—Å–∫–ª–∞–¥\n"
        "4) –ú–æ–π —Å—Ç–∞—Ç—É—Å\n"
        "5) –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="–ú–æ—è –∫–∞—Ä—Ç–∞", callback_data="help_card")
    builder.button(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="help_question")
    builder.button(text="–†–∞—Å–∫–ª–∞–¥", callback_data="help_spread")
    builder.button(text="–ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="help_status")
    builder.button(text="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="help_subscription")
    builder.button(text="üî∞ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    await callback_query.message.edit_text(
        text, reply_markup=builder.as_markup(), parse_mode="HTML"
    )
    await callback_query.answer()


@router.callback_query(F.data == "help_card")
@error_handler(default_return=None)
async def help_card(callback_query: types.CallbackQuery) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ä–∞–∑–¥–µ–ª—É "–ú–æ—è –∫–∞—Ä—Ç–∞".

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    text = (
        "üé¥ <b>–ú–æ—è –∫–∞—Ä—Ç–∞</b>\n\n"
        "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∫–∞—Ä—Ç—É –¥–Ω—è. \n"
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´–ú–æ—è –∫–∞—Ä—Ç–∞¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–ª–æ–¥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–û—Ä–∞–∫—É–ª —à–∞–º–∞–Ω–∞ –º–∏—Å—Ç–∏–∫–∞¬ª, ¬´–°–æ—é–∑ –±–æ–≥–∏–Ω—å¬ª –∏–ª–∏ ¬´–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Ç–∞—Ä–æ¬ª).\n"
        "3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä, –∏ –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –≤–∞–º –∫–∞—Ä—Ç—É –¥–Ω—è —Å —Ç—Ä–∞–∫—Ç–æ–≤–∫–æ–π."
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="üî∞ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–ø—Ä–∞–≤–∫—É", callback_data="help")
    await callback_query.message.edit_text(
        text, reply_markup=builder.as_markup(), parse_mode="HTML"
    )
    await callback_query.answer()


@router.callback_query(F.data == "help_question")
@error_handler(default_return=None)
async def help_question(callback_query: types.CallbackQuery) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ä–∞–∑–¥–µ–ª—É "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å".

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    text = (
        "‚ùì <b>–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</b>\n\n"
        "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –Ω–∞—à–µ–≥–æ –ò–ò:\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n"
        "2. –ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥: —Ç—Ä–∞–Ω–∑–∞–∫—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–ª–∏ –ö–ü–¢.\n"
        "3. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å —É—á—ë—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞."
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="üî∞ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–ø—Ä–∞–≤–∫—É", callback_data="help")
    await callback_query.message.edit_text(
        text, reply_markup=builder.as_markup(), parse_mode="HTML"
    )
    await callback_query.answer()


@router.callback_query(F.data == "help_spread")
@error_handler(default_return=None)
async def help_spread(callback_query: types.CallbackQuery) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ä–∞–∑–¥–µ–ª—É "–†–∞—Å–∫–ª–∞–¥".

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    text = (
        "üìú <b>–†–∞—Å–∫–ª–∞–¥</b>\n\n"
        "–†–∞—Å–∫–ª–∞–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–∫—Ç–æ–≤–∫—É –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ä—Ç:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´–†–∞—Å–∫–ª–∞–¥¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç –±—É–¥–µ—Ç –≤ —Ä–∞—Å–∫–ª–∞–¥–µ (–æ—Ç 1 –¥–æ 3).\n"
        "3. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏.\n"
        "4. –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–∞—Å–∫–ª–∞–¥–∞, –æ–ø–∏—Å—ã–≤–∞—è –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã –∏ –∏—Ö –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å."
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="üî∞ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–ø—Ä–∞–≤–∫—É", callback_data="help")
    await callback_query.message.edit_text(
        text, reply_markup=builder.as_markup(), parse_mode="HTML"
    )
    await callback_query.answer()


@router.callback_query(F.data == "help_status")
@error_handler(default_return=None)
async def help_status(callback_query: types.CallbackQuery) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ä–∞–∑–¥–µ–ª—É "–ú–æ–π —Å—Ç–∞—Ç—É—Å".

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    text = (
        "üíå <b>–ú–æ–π —Å—Ç–∞—Ç—É—Å</b>\n\n"
        "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã —É–∑–Ω–∞–µ—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ:\n"
        "1. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ (expired, premium –∏ —Ç.–¥.).\n"
        "2. –î–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.\n"
        "3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç, –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="üî∞ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–ø—Ä–∞–≤–∫—É", callback_data="help")
    await callback_query.message.edit_text(
        text, reply_markup=builder.as_markup(), parse_mode="HTML"
    )
    await callback_query.answer()


@router.callback_query(F.data == "help_subscription")
@error_handler(default_return=None)
async def help_subscription(callback_query: types.CallbackQuery) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ä–∞–∑–¥–µ–ª—É "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É".

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    text = (
        "üí≥ <b>–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>\n\n"
        "–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n"
        "2. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ (–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø, –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤).\n"
        "3. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–∫—É–ø–∫—É, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="üî∞ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–ø—Ä–∞–≤–∫—É", callback_data="help")
    await callback_query.message.edit_text(
        text, reply_markup=builder.as_markup(), parse_mode="HTML"
    )
    await callback_query.answer()


# ---------- –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ----------
@router.callback_query(F.data == "ask_question")
@error_handler(default_return=None)
async def ask_question_callback(callback_query: types.CallbackQuery) -> None:
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    text = (
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n"
        "1. –¢—Ä–∞–Ω–∑–∞–∫—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑\n"
        "2. –ú–µ—Ç–æ–¥ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π —Ç–µ—Ä–∞–ø–∏–∏"
    )
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–¢—Ä–∞–Ω–∑–∞–∫—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑", callback_data="question_variant_transact"
    )
    builder.button(text="–ö–ü–¢", callback_data="question_variant_cbt")
    builder.button(text="üî∞ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    kb = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback_query.answer()


@router.callback_query(
    F.data.in_(["question_variant_transact", "question_variant_cbt"])
)
@error_handler(default_return=None)
async def question_variant_selection(callback_query: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (—Ç—Ä–∞–Ω–∑–∞–∫—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–ª–∏ –ö–ü–¢) –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback_query.from_user.id
    if callback_query.data == "question_variant_transact":
        pending_question_variants[user_id] = "transact"
        chosen_text = "–¢—Ä–∞–Ω–∑–∞–∫—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑"
    else:
        pending_question_variants[user_id] = "cbt"
        chosen_text = "–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è"
    text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥—Ö–æ–¥: <b>{chosen_text}</b>.\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    builder = InlineKeyboardBuilder()
    builder.button(text="üî∞ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")
    kb = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback_query.answer()


# ---------- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ----------
def get_admin_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    """
    try:
        builder = InlineKeyboardBuilder()
        builder.button(text="–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ GPT", callback_data="admin_show_queue")
        builder.button(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_list_users_0")
        builder.button(text="–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å GPT", callback_data="admin_clear_queue")
        builder.button(text="–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="admin_broadcast")
        builder.button(text="–í–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞", callback_data="admin_refund")
        builder.button(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –æ—á–µ—Ä–µ–¥–∏", callback_data="run_test_queue")
        builder.button(text="–í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", callback_data="admin_shutdown")
        builder.button(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)
        return builder.as_markup()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é –∞–¥–º–∏–Ω–∞: %s", e)
        return InlineKeyboardMarkup()


@router.message(Command("admin"))
@admin_required
@error_handler(default_return=None)
async def cmd_admin_panel(message: types.Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    text = "üîí <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await message.answer(
        text, parse_mode="HTML", reply_markup=get_admin_menu_keyboard()
    )


async def send_long_message(chat_id: int, text: str, chunk_size: int = 4000) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —á–∞—Å—Ç—è–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã.

    Args:
        chat_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.
        text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        chunk_size (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    for i in range(0, len(text), chunk_size):
        chunk = text[i : i + chunk_size]
        await bot.send_message(chat_id, chunk)
        await asyncio.sleep(1)


@router.callback_query(F.data == "run_test_queue")
@error_handler(default_return=None)
async def run_test_queue_handler(callback_query: types.CallbackQuery) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –Ω–∞–≥—Ä—É–∑–∫—É –æ—á–µ—Ä–µ–¥–∏ GPT-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    await callback_query.answer(
        "–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )
    chat_id = callback_query.message.chat.id
    tasks = []
    for i in range(50):
        # –î–ª—è —Ç–µ—Å—Ç–∞ –∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–∏–±–∞–≤–ª—è—è –∏–Ω–¥–µ–∫—Å –∫ —Ç–µ–∫—É—â–µ–º—É id
        user_id = callback_query.from_user.id + i
        question = f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä {i+1}"
        task = asyncio.create_task(
            ask_gpt_in_queue(
                dispatcher=request_dispatcher,
                chat_id=chat_id,
                user_id=user_id,
                func_to_call=ask_yandex_gpt,
                user_question=question,
            )
        )
        tasks.append(task)
    results = await asyncio.gather(*tasks)
    response_text = "\n".join([f"–ó–∞–ø—Ä–æ—Å {i+1}: {res}" for i, res in enumerate(results)])
    if len(response_text) > 4000:
        await send_long_message(chat_id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:\n{response_text}")
    else:
        await bot.send_message(chat_id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:\n{response_text}")


@error_handler(default_return=None)
async def show_queue(callback_query: types.CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ GPT-–∑–∞–ø—Ä–æ—Å–æ–≤.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    queued_count = request_dispatcher.queue.qsize()
    active_count = len(request_dispatcher.active_requests)
    details = ""

    if active_count > 0:
        details += "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
        for i, req in enumerate(list(request_dispatcher.active_requests)[:5]):
            details += (
                f"{i+1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {req.user_id} ‚Äî {req.func_to_call.__name__}\n"
            )
    else:
        details += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.\n"

    snapshot = list(request_dispatcher.queue._queue)
    if snapshot:
        details += "\n–ó–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏:\n"
        for i, req in enumerate(snapshot[:5]):
            details += (
                f"{i+1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {req.user_id} ‚Äî {req.func_to_call.__name__}\n"
            )
    else:
        details += "\n–ù–µ—Ç –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏."

    text = (
        f"üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏</b>\n\n"
        f"–û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞—á: <b>{queued_count}</b>\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: <b>{active_count}</b>\n"
        f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á: <b>{queued_count + active_count}</b>\n\n" + details
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    kb = builder.as_markup()
    await callback_query.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await callback_query.answer()


@router.callback_query(F.data.startswith("admin_list_users_"))
@admin_required
@error_handler(default_return=None)
async def admin_list_users_handler(callback_query: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    try:
        page = int(callback_query.data.split("_")[-1])
    except ValueError:
        page = 0

    text, pages_count = await list_users_paginated(page, USERS_PER_PAGE)

    builder = InlineKeyboardBuilder()
    offset = page * USERS_PER_PAGE
    query = (
        "SELECT telegram_id, username FROM users ORDER BY user_id ASC LIMIT ? OFFSET ?"
    )
    async with database.db.execute(query, (USERS_PER_PAGE, offset)) as cursor:
        async for row in cursor:
            tid, username = row
            btn_text = (
                f"{username}" if username and username != "–ù–µ—Ç username" else f"{tid}"
            )
            builder.button(text=btn_text, callback_data=f"admin_sub_user_{tid}")

    if page > 0:
        builder.button(text="‚¨ÖÔ∏è", callback_data=f"admin_list_users_{page-1}")
    if page < pages_count - 1:
        builder.button(text="‚û°Ô∏è", callback_data=f"admin_list_users_{page+1}")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    builder.adjust(1)
    await callback_query.message.edit_text(
        text, parse_mode="HTML", reply_markup=builder.as_markup()
    )
    await callback_query.answer()


@router.callback_query(F.data.startswith("admin_sub_user_"))
@admin_required
@error_handler(default_return=None)
async def admin_sub_user_handler(callback_query: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    try:
        target_tid = int(callback_query.data.split("_")[-1])
    except ValueError:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        return

    text = f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{target_tid}</b>:"
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"admin_sub_extend_{target_tid}"
    )
    builder.button(
        text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"admin_sub_cancel_{target_tid}"
    )
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_list_users_0")
    builder.adjust(1)
    await callback_query.message.edit_text(
        text, parse_mode="HTML", reply_markup=builder.as_markup()
    )
    await callback_query.answer()


@router.callback_query(F.data.startswith("admin_sub_extend_"))
@admin_required
@error_handler(default_return=None)
async def admin_sub_extend_handler(callback_query: types.CallbackQuery) -> None:
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    try:
        target_tid = int(callback_query.data.split("_")[-1])
    except ValueError:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        return

    admin_id = callback_query.from_user.id
    pending_sub_actions[admin_id] = PendingSubAction(
        action="extend", target_tid=target_tid
    )
    await callback_query.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{target_tid}</b>:",
        parse_mode="HTML",
    )
    await callback_query.answer()


@router.callback_query(
    lambda c: c.data.startswith("admin_sub_cancel_")
    and not c.data.startswith("admin_sub_cancel_full_")
    and not c.data.startswith("admin_sub_cancel_part_")
)
@admin_required
@error_handler(default_return=None)
async def admin_sub_cancel_menu(callback_query: types.CallbackQuery) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ).

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    try:
        target_tid = int(callback_query.data.split("_")[-1])
    except ValueError:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        return

    text = f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{target_tid}</b>:"
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"admin_sub_cancel_full_{target_tid}"
    )
    builder.button(
        text="–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–µ–≤",
        callback_data=f"admin_sub_cancel_part_{target_tid}",
    )
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"admin_sub_user_{target_tid}")
    builder.adjust(1)
    await callback_query.message.edit_text(
        text, parse_mode="HTML", reply_markup=builder.as_markup()
    )
    await callback_query.answer()


@router.callback_query(F.data.startswith("admin_sub_cancel_full_"))
@admin_required
@error_handler(default_return=None)
async def admin_sub_cancel_full_handler(callback_query: types.CallbackQuery) -> None:
    """
    –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    try:
        target_tid = int(callback_query.data.split("_")[-1])
    except ValueError:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        return

    today = datetime.date.today()
    await set_subscription_status(target_tid, "expired")
    await extend_subscription(target_tid, today.isoformat())

    await callback_query.message.edit_text(
        f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{target_tid}</b> –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é.",
        parse_mode="HTML",
    )
    await callback_query.answer()


@router.callback_query(F.data.startswith("admin_sub_cancel_part_"))
@admin_required
@error_handler(default_return=None)
async def admin_sub_cancel_part_handler(callback_query: types.CallbackQuery) -> None:
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    try:
        target_tid = int(callback_query.data.split("_")[-1])
    except ValueError:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        return

    admin_id = callback_query.from_user.id
    pending_sub_actions[admin_id] = PendingSubAction(
        action="cancel_partial", target_tid=target_tid
    )
    await callback_query.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{target_tid}</b>:",
        parse_mode="HTML",
    )
    await callback_query.answer()


@router.message(lambda message: message.text and message.text.strip().isdigit())
@admin_required
@error_handler(default_return=None)
async def process_pending_sub_action(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–µ–≤.
    """
    admin_id = message.from_user.id
    pending_action: Optional[PendingSubAction] = pending_sub_actions.get(admin_id)

    if not pending_action:
        return

    try:
        months = int(message.text.strip())
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–µ–≤.")
        return

    today = datetime.date.today()
    async with database.db.execute(
        "SELECT subscription_end FROM users WHERE telegram_id=?",
        (pending_action.target_tid,),
    ) as cursor:
        row = await cursor.fetchone()
    if row and row[0]:
        try:
            current_end_date = datetime.date.fromisoformat(row[0])
        except Exception:
            current_end_date = today
    else:
        current_end_date = today

    if pending_action.action == "extend":
        if current_end_date < today:
            current_end_date = today
        new_end_date = current_end_date + datetime.timedelta(days=months * 30)
        await set_subscription_status(pending_action.target_tid, "premium")
        await extend_subscription(pending_action.target_tid, new_end_date.isoformat())
        response_text = (
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{pending_action.target_tid}</b> –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {months} –º–µ—Å—è—Ü(–µ–≤).\n"
            f"–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_end_date.isoformat()}"
        )
    elif pending_action.action == "cancel_partial":
        new_end_date = current_end_date - datetime.timedelta(days=months * 30)
        if new_end_date <= today:
            await set_subscription_status(pending_action.target_tid, "expired")
            new_end_date = today
            response_text = (
                f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{pending_action.target_tid}</b> –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é, "
                f"—Ç–∞–∫ –∫–∞–∫ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ {months} –º–µ—Å—è—Ü(–µ–≤) –ø—Ä–∏–≤–µ–ª–æ –∫ –æ–∫–æ–Ω—á–∞–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–∏."
            )
        else:
            response_text = (
                f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{pending_action.target_tid}</b> —Å–æ–∫—Ä–∞—â–µ–Ω–∞ –Ω–∞ {months} –º–µ—Å—è—Ü(–µ–≤).\n"
                f"–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_end_date.isoformat()}"
            )
        await extend_subscription(pending_action.target_tid, new_end_date.isoformat())
    else:
        response_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."

    pending_sub_actions.pop(admin_id, None)
    await message.answer(response_text, parse_mode="HTML")


@error_handler(default_return=None)
async def clear_gpt_queue(callback_query: types.CallbackQuery) -> None:
    """
    –û—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å GPT-–∑–∞–ø—Ä–æ—Å–æ–≤.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    n = len(request_dispatcher.queue._queue)
    request_dispatcher.queue._queue.clear()
    request_dispatcher.queue._unfinished_tasks = max(
        0, request_dispatcher.queue._unfinished_tasks - n
    )

    text = f"‚úÖ –û—á–µ—Ä–µ–¥—å GPT-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—á–∏—â–µ–Ω–∞ (—É–¥–∞–ª–µ–Ω–æ {n} –∑–∞–¥–∞—á)."
    builder = InlineKeyboardBuilder()
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    kb = builder.as_markup()
    await callback_query.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await callback_query.answer()
    logger.info(
        f"Admin {callback_query.from_user.id} –æ—á–∏—Å—Ç–∏–ª –æ—á–µ—Ä–µ–¥—å GPT-–∑–∞–ø—Ä–æ—Å–æ–≤ (—É–¥–∞–ª–µ–Ω–æ {n} –∑–∞–¥–∞—á)."
    )


@router.callback_query(F.data == "admin_refund")
@admin_required
@error_handler(default_return=None)
async def admin_refund_button(callback_query: types.CallbackQuery) -> None:
    """
    –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    instruction = (
        "–ß—Ç–æ–±—ã –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/refund &lt;ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏&gt;</code>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/refund 1234567890</code>"
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    kb = builder.as_markup()
    await callback_query.message.answer(instruction, parse_mode="HTML", reply_markup=kb)
    await callback_query.answer()


@router.message(Command("refund"))
@admin_required
@error_handler(default_return=None)
async def admin_refund_command(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) < 2:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<code>/refund &lt;ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏&gt;</code>",
            parse_mode="HTML",
        )
        return

    t_id = parts[1].strip()

    async with database.db.execute(
        "SELECT telegram_id FROM transactions WHERE transaction_id = ?", (t_id,)
    ) as cursor:
        row = await cursor.fetchone()
    if row is None:
        await message.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    client_telegram_id = row[0]
    today = datetime.date.today()

    try:
        await bot.refund_star_payment(
            user_id=client_telegram_id, telegram_payment_charge_id=t_id
        )
        await update_transaction_status(t_id, "refunded")

        async with database.db.execute(
            "SELECT subscription_end FROM users WHERE telegram_id=?",
            (client_telegram_id,),
        ) as cursor:
            row = await cursor.fetchone()
        if row and row[0]:
            current_end_date = datetime.date.fromisoformat(row[0])
        else:
            current_end_date = today

        if current_end_date > today:
            new_end_date = current_end_date - datetime.timedelta(days=30)
            if new_end_date > today:
                await extend_subscription(client_telegram_id, new_end_date.isoformat())
            else:
                await set_subscription_status(client_telegram_id, "expired")
                await extend_subscription(client_telegram_id, today.isoformat())
        else:
            await set_subscription_status(client_telegram_id, "expired")
            await extend_subscription(client_telegram_id, today.isoformat())

        await message.answer("–í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω.")
    except TelegramBadRequest as e:
        err_text = "–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."
        if "CHARGE_ALREADY_REFUNDED" in e.message:
            err_text = "–ü–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω."
        await message.answer(err_text)


@router.callback_query(F.data == "admin_shutdown")
@admin_required
@error_handler(default_return=None)
async def shutdown_confirmation(callback_query: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    text = (
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å–µ –µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å—ã."
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–∞, –≤—ã–∫–ª—é—á–∏—Ç—å", callback_data="confirm_shutdown")
    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_back")
    await callback_query.message.edit_text(
        text, reply_markup=builder.as_markup(), parse_mode="HTML"
    )
    await callback_query.answer()


async def shutdown_bot():
    """
    –ü—Ä–æ–≤–æ–¥–∏—Ç graceful shutdown –±–æ—Ç–∞: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç polling, –æ—Ç–º–µ–Ω—è–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏,
    –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –±–æ—Ç–∞.
    """
    logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è graceful shutdown –±–æ—Ç–∞.")
    try:
        await dp.stop_polling()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling: %s", e)

    try:
        request_dispatcher.worker_task.cancel()
        await request_dispatcher.worker_task
    except asyncio.CancelledError:
        logger.info("Worker task —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω.")

    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    if tasks:
        logger.info("–û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏...")
        for task in tasks:
            task.cancel()
        await asyncio.gather(*tasks, return_exceptions=True)

    try:
        dp.shutdown()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: %s", e)
    try:
        await bot.session.close()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞: %s", e)
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")


@router.callback_query(F.data == "confirm_shutdown")
@admin_required
@error_handler(default_return=None)
async def confirm_shutdown_handler(callback_query: types.CallbackQuery):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—É shutdown.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    admin_id = callback_query.from_user.id
    await callback_query.answer("–ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
    await callback_query.message.edit_text(
        "–ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è, –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!", parse_mode="HTML"
    )
    logger.info(f"Admin {admin_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞.")
    asyncio.create_task(shutdown_bot())


@router.callback_query(F.data.startswith("admin_"))
@admin_required
@error_handler(default_return=None)
async def process_admin_callbacks(callback_query: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–µ callback-–∑–∞–ø—Ä–æ—Å—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    if callback_query.data.startswith("admin_sub_"):
        return

    if callback_query.data in ["admin_shutdown", "confirm_shutdown"]:
        return

    action = callback_query.data
    if action.startswith("admin_list_users_"):
        await admin_list_users_handler(callback_query)
        return
    if action == "admin_show_queue":
        await show_queue(callback_query)
        return
    if action == "admin_clear_queue":
        await clear_gpt_queue(callback_query)
        return
    if action == "admin_broadcast":
        await start_broadcast(callback_query)
        return
    if action == "admin_back":
        text = "üîí <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await callback_query.message.edit_text(
            text, parse_mode="HTML", reply_markup=get_admin_menu_keyboard()
        )
        await callback_query.answer()
        return
    await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)


# ---------- –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ----------
@error_handler(default_return=None)
async def start_broadcast(callback_query: types.CallbackQuery) -> None:
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    Args:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    admin_id = callback_query.from_user.id
    broadcast_mode_admins.add(admin_id)
    text = (
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. "
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –æ–ø—Ä–æ—Å—ã –∏ –¥—Ä—É–≥–∏–µ."
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞ –∏ –Ω–∞–∑–∞–¥", callback_data="admin_back")
    kb = builder.as_markup()
    await callback_query.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await callback_query.answer()
    logger.info(f"Admin {admin_id} –Ω–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.")


@router.message(F.content_type == ContentType.ANY)
@error_handler(default_return=None)
async def broadcast_handler(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    admin_id = message.from_user.id
    if admin_id in broadcast_mode_admins:
        broadcast_mode_admins.remove(admin_id)
        query = "SELECT telegram_id FROM users"
        async with database.db.execute(query) as cursor:
            all_users = [row[0] async for row in cursor]
        sent_count = 0
        failed_count = 0
        content_type = message.content_type
        media = None
        poll = None
        if content_type == ContentType.TEXT:
            media = {"type": "text", "text": message.text}
        elif content_type == ContentType.PHOTO:
            photo = message.photo[-1]
            media = {
                "type": "photo",
                "file_id": photo.file_id,
                "caption": message.caption,
            }
        elif content_type == ContentType.VIDEO:
            media = {
                "type": "video",
                "file_id": message.video.file_id,
                "caption": message.caption,
            }
        elif content_type == ContentType.DOCUMENT:
            media = {
                "type": "document",
                "file_id": message.document.file_id,
                "caption": message.caption,
            }
        elif content_type == ContentType.AUDIO:
            media = {
                "type": "audio",
                "file_id": message.audio.file_id,
                "caption": message.caption,
            }
        elif content_type == ContentType.STICKER:
            media = {"type": "sticker", "file_id": message.sticker.file_id}
        elif content_type == ContentType.POLL:
            poll = {
                "question": message.poll.question,
                "options": [option.text for option in message.poll.options],
                "is_anonymous": message.poll.is_anonymous,
                "type": message.poll.type,
                "allows_multiple_answers": message.poll.allows_multiple_answers,
                "correct_option_id": (
                    message.poll.correct_option_id
                    if message.poll.type == "quiz"
                    else None
                ),
            }
        elif content_type == ContentType.VOICE:
            media = {
                "type": "voice",
                "file_id": message.voice.file_id,
                "caption": message.caption,
            }
        elif content_type == ContentType.VIDEO_NOTE:
            media = {"type": "video_note", "file_id": message.video_note.file_id}
        elif content_type == ContentType.LOCATION:
            media = {
                "type": "location",
                "latitude": message.location.latitude,
                "longitude": message.location.longitude,
            }
        elif content_type == ContentType.CONTACT:
            media = {
                "type": "contact",
                "phone_number": message.contact.phone_number,
                "first_name": message.contact.first_name,
                "last_name": (
                    message.contact.last_name if message.contact.last_name else ""
                ),
            }
        elif content_type == ContentType.DICE:
            media = {"type": "dice", "emoji": message.dice.emoji}
        else:
            await message.answer("–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return

        for t_id in all_users:
            try:
                if media:
                    if media["type"] == "text":
                        await bot.send_message(t_id, media["text"], parse_mode="HTML")
                    elif media["type"] == "photo":
                        await bot.send_photo(
                            t_id,
                            media["file_id"],
                            caption=media.get("caption"),
                            parse_mode="HTML",
                        )
                    elif media["type"] == "video":
                        await bot.send_video(
                            t_id,
                            media["file_id"],
                            caption=media.get("caption"),
                            parse_mode="HTML",
                        )
                    elif media["type"] == "document":
                        await bot.send_document(
                            t_id,
                            media["file_id"],
                            caption=media.get("caption"),
                            parse_mode="HTML",
                        )
                    elif media["type"] == "audio":
                        await bot.send_audio(
                            t_id,
                            media["file_id"],
                            caption=media.get("caption"),
                            parse_mode="HTML",
                        )
                    elif media["type"] == "sticker":
                        await bot.send_sticker(t_id, media["file_id"])
                    elif media["type"] == "voice":
                        await bot.send_voice(
                            t_id,
                            media["file_id"],
                            caption=media.get("caption"),
                            parse_mode="HTML",
                        )
                    elif media["type"] == "video_note":
                        await bot.send_video_note(t_id, media["file_id"])
                    elif media["type"] == "location":
                        await bot.send_location(
                            t_id, media["latitude"], media["longitude"]
                        )
                    elif media["type"] == "contact":
                        await bot.send_contact(
                            t_id,
                            phone_number=media["phone_number"],
                            first_name=media["first_name"],
                            last_name=media["last_name"],
                        )
                    elif media["type"] == "dice":
                        await bot.send_dice(t_id, emoji=media["emoji"])
                elif poll:
                    await bot.send_poll(
                        chat_id=t_id,
                        question=poll["question"],
                        options=poll["options"],
                        is_anonymous=poll["is_anonymous"],
                        type=poll["type"],
                        allows_multiple_answers=poll["allows_multiple_answers"],
                        correct_option_id=poll["correct_option_id"],
                    )
                sent_count += 1
                await asyncio.sleep(0.05)
            except Exception as e:
                logger.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {t_id}: {e}"
                )
                failed_count += 1
        await message.answer(
            f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
        )
        logger.info(
            f"Admin {admin_id} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}."
        )
    else:
        await fallback_handler(message)


# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–æ–∂–∏–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞) ----------
@router.message(F.content_type == ContentType.TEXT)
@error_handler(default_return=None)
async def fallback_handler(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–ª –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –∫ GPT,
    –∏–Ω–∞—á–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    text_in = (message.text or "").strip()
    username = message.from_user.username or "–ù–µ—Ç username"
    await register_user(user_id, username)
    if user_id in pending_question_variants:
        variant = pending_question_variants.pop(user_id)
        if not await can_ask_question(user_id):
            await message.answer(
                "–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞."
            )
            return
        if variant == "transact":
            answer = await ask_gpt_in_queue(
                dispatcher=request_dispatcher,
                chat_id=chat_id,
                user_id=user_id,
                func_to_call=ask_yandex_gpt,
                user_question=text_in,
            )
        elif variant == "cbt":
            answer = await ask_gpt_in_queue(
                dispatcher=request_dispatcher,
                chat_id=chat_id,
                user_id=user_id,
                func_to_call=ask_cbt,
                user_question=text_in,
            )
        else:
            answer = "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞."
        safe_ans = html.escape(answer)
        safe_q = html.escape(text_in)
        safe_q = markdown_to_telegram_html(safe_q)
        resp_text = f"üìù <b>–í–∞—à –≤–æ–ø—Ä–æ—Å</b>:\n{safe_q}\n\nüí¨ <b>–û—Ç–≤–µ—Ç</b>:\n{safe_ans}"
        resp_text = markdown_to_telegram_html(resp_text)
        await message.answer(resp_text, parse_mode="HTML")
        builder = InlineKeyboardBuilder()
        builder.button(text="üî∞ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")
        kb = builder.as_markup()
        await message.answer("–ì–æ—Ç–æ–≤–æ! –ß–µ–º –µ—â—ë –º–æ–∂–µ–º –ø–æ–º–æ—á—å?", reply_markup=kb)
    else:
        text = "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ —Ç–µ–º–µ. –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Å–∏—Ö–æ–ª–æ–≥—É¬ª."
        builder = InlineKeyboardBuilder()
        builder.button(text="üî∞ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")
        kb = builder.as_markup()
        await message.answer(text, reply_markup=kb)


# ============================================================================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ============================================================================


async def dump_all_tasks() -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏).
    """
    tasks = asyncio.all_tasks()
    for task in tasks:
        print(task)


async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:
    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä –æ—á–µ—Ä–µ–¥–∏ GPT-–∑–∞–ø—Ä–æ—Å–æ–≤.
    - –ó–∞–ø—É—Å–∫–∞–µ—Ç polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
    """

    await init_db()

    if database.db is None:
        raise RuntimeError("Database is not initialized!")

    global request_dispatcher
    request_dispatcher = RequestDispatcher(
        bot=bot,
        max_tasks=MAX_SYNCHRONOUS_TASKS,
        req_per_sec=MAX_REQUESTS_PER_SECOND,
        req_per_hour=MAX_REQUESTS_PER_HOUR,
    )

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await dump_all_tasks()
    await dp.start_polling(bot)
    logger.info("Polling –∑–∞–≤–µ—Ä—à—ë–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: %s", e)
    finally:
        sys.exit(0)
